struct Spotlight
{
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};
uniform Spotlight spotLight;

vec3 CalcSpotLight(Spotlight light,vec3 normal,vec3 fragPos,vec3 viewDir)
{
	 vec3 lightDir = normalize(light.position - fragPos);
	 float theta = dot(lightDir,normalize(-light.direction));
	 float amy = light.outerCutOff - light.cutOff;
	 float intensity = clamp((light.outerCutOff - theta)/amy,0.0,1.0);
	 
    // 计算漫反射强度
    float diff = max(dot(normal, lightDir), 0.0);
    // 计算镜面反射
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // 计算衰减
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance +
                 light.quadratic * (distance * distance));
    // 将各个分量合并
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
	
	diffuse *= intensity;
	specular *= intensity;
	
	return ambient+diffuse+specular;
}